{"version":3,"sources":["components/chart-service-contex/chart-service-contex.js","components/hoc/with-chart-service.js","components/chart/index.js","components/chart/chart.js","components/escape-button/index.js","components/escape-button/escape-button.js","components/spinner/spinner.js","components/spinner/index.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","actions/index.js","components/chart-container/defolt-chart-props.js","components/chart/getLabelIndex.js","components/chart-container/chart-container.js","components/chart-container/index.js","components/app/app.js","components/app/index.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","reducers/index.js","store.js","index.js","services/chart-service.js"],"names":["React","createContext","ChartServiceProvider","Provider","ChartServiceConsumer","Consumer","withChartService","Wrapped","props","chartService","Chart","labelClickHandler","e","refs","chartProps","this","ref","data","options","onClick","Component","EscapeButton","escapeClickHandler","disabled","className","spinner","cn","Spinner","ErrorIndicator","chartDataError","error","type","payload","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","getLabelIndex","labelIndex","mouseX","offsetX","mouseY","offsetY","scales","chart","chartInstance","chartElements","getElementAtEvent","length","_index","maxLabelHeight","Math","round","_labelSizes","highest","height","labelsCentrCoordinates","_labelItems","map","fractionalX","x","fractionalY","y","labelsArea","index","x1","label","y1","x2","y2","rotation","clickDepth","clickLength","tan","labelLength","sqrt","intersectionPoint","forEach","labelArea","ChartContainer","goToLabelDetails","month","year","yearIndex","Number","isInteger","getDataByDates","then","chartData","catch","err","getDataByMonth","getDataByYears","chartDataLoaded","chartDataRequested","loading","labels","defoltChartProps","num","isButtonDisabled","mapDispatcToProps","newChartData","chartContainer","connect","app","App","ErrorBoundry","state","hasError","setState","children","initialState","reducer","action","store","createStore","sourceUrl","getResource","url","a","fetch","res","ok","Error","status","json","yearObj","amount","months","string","monthIndex","days","_","ReactDOM","render","value","document","getElementById"],"mappings":"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","file":"static/js/main.bcb55828.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst {\r\n    Provider: ChartServiceProvider,\r\n    Consumer: ChartServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    ChartServiceProvider,\r\n    ChartServiceConsumer\r\n}","import React from 'react';\r\nimport { ChartServiceConsumer } from '../chart-service-contex';\r\n\r\nconst withChartService = () => (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <ChartServiceConsumer>\r\n                {\r\n                    (chartService) => {\r\n                        return (<Wrapped {...props} chartService={chartService}/>)\r\n                    }\r\n                }\r\n            </ChartServiceConsumer>\r\n        )\r\n    }\r\n};\r\n\r\nexport default withChartService;","import Chart from './chart';\r\n\r\nexport default Chart;","import React, {Component} from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nclass Chart extends Component {\r\n\r\n    labelClickHandler = (e)=> {\r\n        this.props.labelClickHandler(e, this.refs);\r\n    }\r\n\r\n    render() {\r\n        const { chartProps } = this.props;\r\n        return (\r\n            <div>\r\n                <Line ref=\"chart\" data={chartProps} options={{onClick: this.labelClickHandler}}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart;","import EscapeButton from './escape-button';\r\n\r\nexport default EscapeButton;","import React from 'react';\r\n\r\nconst EscapeButton = ({ escapeClickHandler, disabled }) => {\r\n    return (\r\n        <button className='EscapeButton' disabled={disabled} onClick={escapeClickHandler}>Назад</button>\r\n    )\r\n}\r\n\r\nexport default EscapeButton;","import React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport './spinner.css';\r\n\r\nconst spinner = cn('Spinner');\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={spinner()}>\r\n            <div className={spinner('Icon')}>\r\n                <div className={spinner('Helper')}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Spinner;","import Spinner from './spinner';\r\n\r\nexport default Spinner;","import ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\n\r\nconst ErrorIndicator = () => {\r\n    return <div>Ошибка при загрузке данных!</div>\r\n}\r\n\r\nexport default ErrorIndicator;","const chartDataRequested = () => {\r\n    return {\r\n        type: 'FETCH_CHART_DATA_REQUEST'\r\n    }\r\n}\r\n\r\nconst chartDataLoaded = (newChartData) => {\r\n    return {\r\n        type: 'FETCH_CHART_DATA_SUCCESS',\r\n        payload: newChartData\r\n    };\r\n}\r\n\r\nconst chartDataError = (error) => {\r\n    return {\r\n        type: 'FETCH_CHART_DATA_FAILURE',\r\n        payload: error\r\n    }\r\n}\r\nconst goToLabelDetails = (newChartData) => {\r\n    return {\r\n        type: 'GO_TO_LABEL_DETAIL',\r\n        payload: newChartData\r\n    }\r\n}\r\n\r\nexport { chartDataLoaded, chartDataRequested, chartDataError, goToLabelDetails };","const data = {\r\n    datasets: [\r\n        {\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10\r\n        }\r\n    ]\r\n};\r\n\r\nexport default data;","const getLabelIndex = (e, refs) => {\r\n\r\n    let labelIndex;\r\n    const mouseX = e.offsetX;\r\n    const mouseY = e.offsetY;\r\n    \r\n    const scales = refs.chart.chartInstance.scales['x-axis-0'];\r\n\r\n    const chartElements  = refs.chart.chartInstance.getElementAtEvent(e)\r\n    if (chartElements.length) {\r\n        labelIndex = chartElements[0]._index;\r\n        return labelIndex;\r\n    }\r\n\r\n    const maxLabelHeight = Math.round(scales._labelSizes.highest.height);\r\n    const labelsCentrCoordinates = scales._labelItems.map(({x: fractionalX, y: fractionalY}) => {\r\n        return {x: Math.round(fractionalX), y: Math.round(fractionalY)}\r\n    });\r\n\r\n    let labelsArea = labelsCentrCoordinates.map(({x, y}, index) => {\r\n        return {x1: x - scales._labelItems[index].label.length * 6.7 / 2, y1: y,\r\n                x2: x + scales._labelItems[index].label.length * 6.7 / 2, y2: y + maxLabelHeight}\r\n    });\r\n\r\n    if (!scales._labelItems[0].rotation) {\r\n        labelsArea.forEach((labelArea, index) => {\r\n            if (labelArea.x1 <= mouseX && mouseX <= labelArea.x2 && labelArea.y1 <= mouseY && mouseY <= labelArea.y2) {\r\n                labelIndex = index;\r\n            }\r\n        });\r\n    } else {\r\n        const clickDepth = mouseY - scales._labelItems[0].y;\r\n        const clickLength = clickDepth / Math.tan(-scales._labelItems[0].rotation);\r\n        const labelLength = Math.sqrt(clickDepth ** 2 + clickLength ** 2);\r\n        const intersectionPoint = mouseX + clickLength;\r\n\r\n        labelsCentrCoordinates.forEach(({x}, index) => {\r\n            if (\r\n                clickDepth >= 0 &&\r\n                x - maxLabelHeight * 0.8 <= intersectionPoint && \r\n                intersectionPoint <= x + maxLabelHeight * 0.8 &&\r\n                labelLength <= labelsArea[index].x2 - labelsArea[index].x1\r\n            ) {\r\n                labelIndex = index;\r\n            }\r\n        });\r\n    }\r\n    return labelIndex;\r\n}\r\n\r\nexport default getLabelIndex;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport withChartService from '../hoc/with-chart-service';\r\n\r\nimport Chart from '../chart';\r\nimport EscapeButton from '../escape-button';\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nimport { chartDataLoaded, chartDataRequested, chartDataError, goToLabelDetails } from '../../actions';\r\n\r\nimport defoltChartProps from './defolt-chart-props';\r\nimport getLabelIndex from '../chart/getLabelIndex';\r\n\r\nimport './chart-container.css';\r\n\r\nclass ChartContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        const { chartService, chartDataLoaded, chartDataRequested, chartDataError } = this.props;\r\n\r\n        chartDataRequested();\r\n        chartService.getDataByYears()\r\n            .then(chartData => chartDataLoaded(chartData))\r\n            .catch(err => chartDataError(err));\r\n    }\r\n\r\n    labelClickHandler = (e, refs)=> {\r\n        const { chartService, goToLabelDetails, month, year, yearIndex } = this.props;\r\n        const index = getLabelIndex(e, refs);\r\n        \r\n        if (Number.isInteger(index) && !month) {\r\n            if (!year) {\r\n                chartService.getDataByMonth(index)\r\n                    .then(chartData => goToLabelDetails(chartData))\r\n                    .catch(err => chartDataError(err));\r\n            } else if (!month) {\r\n                chartService.getDataByDates(yearIndex, index, year)\r\n                    .then(chartData => goToLabelDetails(chartData))\r\n                    .catch(err => chartDataError(err));\r\n            }\r\n        }\r\n    }\r\n\r\n    escapeClickHandler = () => {\r\n        const { chartService, goToLabelDetails, month, year, yearIndex } = this.props;\r\n        \r\n        if (month) {\r\n            chartService.getDataByMonth(yearIndex)\r\n                .then(chartData => goToLabelDetails(chartData))\r\n                .catch(err => chartDataError(err));\r\n        } else if (year) {\r\n            chartService.getDataByYears()\r\n                .then(chartData => goToLabelDetails(chartData))\r\n                .catch(err => chartDataError(err));\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { error, loading, labels, label, data, month, year } = this.props;\r\n\r\n        if (loading) return <Spinner />\r\n\r\n        if (error) return <ErrorIndicator />\r\n\r\n        let chartProps = defoltChartProps;\r\n        chartProps.labels = labels;\r\n        if (month) {\r\n            chartProps.labels = chartProps.labels.map(num => num + 1 + '');\r\n        }\r\n        if (month) {\r\n            chartProps.datasets[0].label = `${label} ${month} ${year}`\r\n        } else if (year) {\r\n            chartProps.datasets[0].label = `${label} ${year}`\r\n        } else {\r\n            chartProps.datasets[0].label = label\r\n        };\r\n        chartProps.datasets[0].data = data;\r\n\r\n        const isButtonDisabled = !year;\r\n\r\n        return (\r\n            <div className='ChartContainer'>\r\n                <EscapeButton escapeClickHandler={this.escapeClickHandler} disabled={isButtonDisabled} />\r\n                <Chart chartProps={chartProps} labelClickHandler={this.labelClickHandler} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ error, loading, labels, label, data, month, year, yearIndex }) => {\r\n    return { error, loading, labels, label, data, month, year, yearIndex }\r\n}\r\n\r\nconst mapDispatcToProps = { chartDataLoaded, chartDataRequested, chartDataError, goToLabelDetails }\r\n\r\nexport default withChartService()(connect(mapStateToProps, mapDispatcToProps)(ChartContainer));","import chartContainer from './chart-container';\r\n\r\nexport default chartContainer;","import React from 'react';\r\nimport ChartContainer from '../chart-container';\r\nimport { cn } from '@bem-react/classname';\r\nimport './app.css';\r\n\r\nconst app = cn('App');\r\n\r\nconst App = () => {\r\n    \r\n    return (\r\n        <div className={app()}>\r\n            <h1>Chart-Painter-App</h1>\r\n            <ChartContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import App from './app';\r\n\r\nexport default App;","import ErrorBoundry from './error-boundry';\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <ErrorIndicator />\r\n        }\r\n        return this.props.children\r\n    }\r\n}","const initialState = {\r\n    error: null,\r\n    loading: true,\r\n    yearIndex: null,\r\n    year: null,\r\n    month: null\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_CHART_DATA_REQUEST':\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            } \r\n        case 'FETCH_CHART_DATA_SUCCESS':\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                label: action.payload.label,\r\n                data: action.payload.data,\r\n                labels: action.payload.labels,\r\n                error: null\r\n            };\r\n        case 'FETCH_CHART_DATA_FAILURE':\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload\r\n            };\r\n        case 'GO_TO_LABEL_DETAIL':\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                data: action.payload.data,\r\n                labels: action.payload.labels,\r\n                year: action.payload.year,\r\n                month: action.payload.month,\r\n                yearIndex: action.payload.yearIndex,\r\n                error: null\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app';\nimport ErrorBoundry from './components/error-boundry';\nimport ChartService from './services/chart-service';\nimport { ChartServiceProvider } from './components/chart-service-contex';\n\nimport store from './store';\n\nconst chartService = new ChartService();\n\nReactDOM.render(\n    <Provider store={store}>\n        <ErrorBoundry>\n            <ChartServiceProvider value={chartService}>\n                <App />\n            </ChartServiceProvider>\n        </ErrorBoundry>\n    </Provider>,\n    document.getElementById('root')\n);","export default class ChartService {\r\n    sourceUrl = './chartData.json';\r\n    \r\n    getResource = async (url) => {\r\n        const res = await fetch(url);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, received ${res.status}`)\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    getDataByYears = async () => {\r\n        const chartData = await this.getResource(this.sourceUrl);\r\n        const label = chartData.label;\r\n        const labels = chartData.data.map(yearObj => yearObj.year);\r\n        const data = chartData.data.map(yearObj => yearObj.amount);\r\n        return {label, labels, data}\r\n    }\r\n\r\n    getDataByMonth = async (yearIndex) => {\r\n        const chartData = await this.getResource(this.sourceUrl);\r\n        const labels = chartData.data[yearIndex].months.map(string => string.month);\r\n        const data = chartData.data[yearIndex].months.map(string => string.amount);\r\n        return {labels, data, yearIndex, year: chartData.data[yearIndex].year}\r\n    }\r\n\r\n    getDataByDates = async (yearIndex, monthIndex, year) => {\r\n        const chartData = await this.getResource(this.sourceUrl);\r\n        const labels = chartData.data[yearIndex].months[monthIndex].days.map((_, index) => index);\r\n        const data = chartData.data[yearIndex].months[monthIndex].days.map(num => num);\r\n        return {labels, data, year, yearIndex, month: chartData.data[yearIndex].months[monthIndex].month}\r\n    }\r\n}"],"sourceRoot":""}